{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import{Button,Box,Typography,AppBar,Tabs,Tab,OutlinedInput,Table,TableBody,TableCell,TableContainer,TableHead,TableRow,Paper}from\"@material-ui/core\";import{DataGrid}from\"@material-ui/data-grid\";import{getWorkflowItems,getTableCount}from\"api\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Workflow=_ref=>{let{reimbursmentId}=_ref;const[workflowItems,setItems]=useState([]);const[loading,setLoading]=useState(false);const[rowCount,setRowCount]=useState(0);// Assuming these are the necessary columns for your DataGrid\nconst columnsworkflow=[{field:\"level\",headerName:\"level\",flex:1},{field:\"status\",headerName:\"status\",flex:1},{field:\"BeginDate\",headerName:\"BeginDate\",flex:1},{field:\"EndDate\",headerName:\"EndDate\",flex:1},{field:\"DaysTaken\",headerName:\"DaysTaken\",flex:1},{field:\"Users\",headerName:\"Users\",flex:1},{field:\"ApprovedBy\",headerName:\"ApprovedBy\",flex:1}];const PAGE_SIZE=15;// Function to load workflow items and get row count\nconst loadData=async function(isFirstLoad){let skip=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;try{setLoading(true);setItems([]);if(isFirstLoad){const count=await getTableCount();setRowCount(count);}const _workflowItems=await getWorkflowItems(reimbursmentId);console.log(\"workflowitems\",_workflowItems);const workflowItemsWithIds=_workflowItems.map((workflowItem,index)=>({...workflowItem,id:index+skip}));setItems(workflowItemsWithIds);}finally{setLoading(false);}};useEffect(()=>{loadData(true);// Load the initial data on mount\n},[]);return/*#__PURE__*/_jsx(Box,{py:5,children:/*#__PURE__*/_jsx(TableContainer,{component:Paper,children:/*#__PURE__*/_jsxs(Table,{children:[/*#__PURE__*/_jsx(TableHead,{children:/*#__PURE__*/_jsx(TableRow,{children:columnsworkflow.map(column=>/*#__PURE__*/_jsx(TableCell,{children:column.headerName},column.field))})}),/*#__PURE__*/_jsx(TableBody,{children:workflowItems.map(row=>/*#__PURE__*/_jsx(TableRow,{children:columnsworkflow.map(column=>/*#__PURE__*/_jsx(TableCell,{children:row[column.field]},column.field))},row.id))})]})})});};export default Workflow;","map":{"version":3,"names":["React","useEffect","useState","Button","Box","Typography","AppBar","Tabs","Tab","OutlinedInput","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","DataGrid","getWorkflowItems","getTableCount","jsx","_jsx","jsxs","_jsxs","Workflow","_ref","reimbursmentId","workflowItems","setItems","loading","setLoading","rowCount","setRowCount","columnsworkflow","field","headerName","flex","PAGE_SIZE","loadData","isFirstLoad","skip","arguments","length","undefined","count","_workflowItems","console","log","workflowItemsWithIds","map","workflowItem","index","id","py","children","component","column","row"],"sources":["/home/user/projects/ReactReimbursement/reimModule/src/pages/workflow.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Button, Box, Typography, AppBar, Tabs, Tab, OutlinedInput, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from \"@material-ui/core\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport { getWorkflowItems, getTableCount } from \"api\";\n\nconst Workflow = ({ reimbursmentId }) => {\n  const [workflowItems, setItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [rowCount, setRowCount] = useState(0);\n\n  // Assuming these are the necessary columns for your DataGrid\n  const columnsworkflow = [\n    { field: \"level\", headerName: \"level\", flex: 1 },\n    { field: \"status\", headerName: \"status\", flex: 1 },\n    { field: \"BeginDate\", headerName: \"BeginDate\", flex: 1 },\n    { field: \"EndDate\", headerName: \"EndDate\", flex: 1 },\n    { field: \"DaysTaken\", headerName: \"DaysTaken\", flex: 1 },\n    { field: \"Users\", headerName: \"Users\", flex: 1 },\n    { field: \"ApprovedBy\", headerName: \"ApprovedBy\", flex: 1 },\n  ];\n\n  const PAGE_SIZE = 15;\n\n  // Function to load workflow items and get row count\n  const loadData = async (isFirstLoad, skip = 0) => {\n    try {\n      setLoading(true);\n      setItems([]);\n\n      if (isFirstLoad) {\n        const count = await getTableCount();\n        setRowCount(count);\n      }\n\n      const _workflowItems = await getWorkflowItems(reimbursmentId);\n      console.log(\"workflowitems\", _workflowItems)\n      const workflowItemsWithIds = _workflowItems.map((workflowItem, index) => ({\n        ...workflowItem,\n        id: index + skip,\n      }));\n      setItems(workflowItemsWithIds);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadData(true); // Load the initial data on mount\n\n  }, []);\n\n  return (\n    <Box py={5}>\n\n\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              {columnsworkflow.map((column) => (\n                <TableCell key={column.field}>{column.headerName}</TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {workflowItems.map((row) => (\n              <TableRow key={row.id}>\n                {columnsworkflow.map((column) => (\n                  <TableCell key={column.field}>{row[column.field]}</TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n    </Box>\n  );\n};\n\nexport default Workflow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}