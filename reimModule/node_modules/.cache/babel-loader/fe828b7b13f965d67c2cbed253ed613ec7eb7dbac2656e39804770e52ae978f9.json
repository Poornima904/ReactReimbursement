{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Documents\\\\ReactSapProj\\\\ReactNew\\\\ReactReimbursement\\\\reimModule\\\\src\\\\pages\\\\workflow.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Box, Typography, AppBar, Tabs, Tab, OutlinedInput, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from \"@material-ui/core\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport { getWorkflowItems, getTableCount } from \"api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Workflow = ({\n  reimbursmentId\n}) => {\n  _s();\n  const [workflowItems, setItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [rowCount, setRowCount] = useState(0);\n\n  // Assuming these are the necessary columns for your DataGrid\n  const columnsworkflow = [{\n    field: \"level\",\n    headerName: \"level\",\n    flex: 1\n  }, {\n    field: \"status\",\n    headerName: \"status\",\n    flex: 1\n  }, {\n    field: \"BeginDate\",\n    headerName: \"BeginDate\",\n    flex: 1\n  }, {\n    field: \"EndDate\",\n    headerName: \"EndDate\",\n    flex: 1\n  }, {\n    field: \"DaysTaken\",\n    headerName: \"DaysTaken\",\n    flex: 1\n  }, {\n    field: \"Users\",\n    headerName: \"Users\",\n    flex: 1\n  }, {\n    field: \"ApprovedBy\",\n    headerName: \"ApprovedBy\",\n    flex: 1\n  }];\n  const PAGE_SIZE = 15;\n\n  // Function to load workflow items and get row count\n  const loadData = async (isFirstLoad, skip = 0) => {\n    try {\n      setLoading(true);\n      setItems([]);\n      if (isFirstLoad) {\n        const count = await getTableCount();\n        setRowCount(count);\n      }\n      const _workflowItems = await getWorkflowItems(reimbursmentId);\n      console.log(\"workflowitems\", _workflowItems);\n      const workflowItemsWithIds = _workflowItems.map((workflowItem, index) => ({\n        ...workflowItem,\n        id: index + skip\n      }));\n      setItems(workflowItemsWithIds);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    loadData(true); // Load the initial data on mount\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    py: 5,\n    children: /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: columnsworkflow.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n              children: column.headerName\n            }, column.field, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: workflowItems.map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: columnsworkflow.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n              children: row[column.field]\n            }, column.field, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 19\n            }, this))\n          }, row.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(Workflow, \"eEcd16HU7unewnkiWQwEVMbsVEU=\");\n_c = Workflow;\nexport default Workflow;\nvar _c;\n$RefreshReg$(_c, \"Workflow\");","map":{"version":3,"names":["React","useEffect","useState","Button","Box","Typography","AppBar","Tabs","Tab","OutlinedInput","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","DataGrid","getWorkflowItems","getTableCount","jsxDEV","_jsxDEV","Workflow","reimbursmentId","_s","workflowItems","setItems","loading","setLoading","rowCount","setRowCount","columnsworkflow","field","headerName","flex","PAGE_SIZE","loadData","isFirstLoad","skip","count","_workflowItems","console","log","workflowItemsWithIds","map","workflowItem","index","id","py","children","component","column","fileName","_jsxFileName","lineNumber","columnNumber","row","_c","$RefreshReg$"],"sources":["C:/Users/user/Documents/ReactSapProj/ReactNew/ReactReimbursement/reimModule/src/pages/workflow.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Button, Box, Typography, AppBar, Tabs, Tab, OutlinedInput, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from \"@material-ui/core\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport { getWorkflowItems, getTableCount } from \"api\";\n\nconst Workflow = ({ reimbursmentId }) => {\n  const [workflowItems, setItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [rowCount, setRowCount] = useState(0);\n\n  // Assuming these are the necessary columns for your DataGrid\n  const columnsworkflow = [\n    { field: \"level\", headerName: \"level\", flex: 1 },\n    { field: \"status\", headerName: \"status\", flex: 1 },\n    { field: \"BeginDate\", headerName: \"BeginDate\", flex: 1 },\n    { field: \"EndDate\", headerName: \"EndDate\", flex: 1 },\n    { field: \"DaysTaken\", headerName: \"DaysTaken\", flex: 1 },\n    { field: \"Users\", headerName: \"Users\", flex: 1 },\n    { field: \"ApprovedBy\", headerName: \"ApprovedBy\", flex: 1 },\n  ];\n\n  const PAGE_SIZE = 15;\n\n  // Function to load workflow items and get row count\n  const loadData = async (isFirstLoad, skip = 0) => {\n    try {\n      setLoading(true);\n      setItems([]);\n\n      if (isFirstLoad) {\n        const count = await getTableCount();\n        setRowCount(count);\n      }\n\n      const _workflowItems = await getWorkflowItems(reimbursmentId);\n      console.log(\"workflowitems\", _workflowItems)\n      const workflowItemsWithIds = _workflowItems.map((workflowItem, index) => ({\n        ...workflowItem,\n        id: index + skip,\n      }));\n      setItems(workflowItemsWithIds);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadData(true); // Load the initial data on mount\n\n  }, []);\n\n  return (\n    <Box py={5}>\n\n\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              {columnsworkflow.map((column) => (\n                <TableCell key={column.field}>{column.headerName}</TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {workflowItems.map((row) => (\n              <TableRow key={row.id}>\n                {columnsworkflow.map((column) => (\n                  <TableCell key={column.field}>{row[column.field]}</TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n    </Box>\n  );\n};\n\nexport default Workflow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}