{"ast":null,"code":"import React,{useEffect,useRef,useState}from\"react\";import{Button,Box,OutlinedInput,Select,MenuItem,TextField,Table,TableBody,TableCell,TableContainer,TableHead,TableRow,Paper}from\"@material-ui/core\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function ReimbursementItems(_ref){let{reimItems,setItems,isEditing,reimbursmentId,status,reimbursementDate,totalAmount,setTotalAmount,validationErrors}=_ref;const[nextItemId,setNextItemId]=useState(10);const reimbursementTypes=[\"Travel\",\"Meals\",\"Supplies\",\"Accommodation\"];// const reimbursementTypeDefaults = {\n//   Travel: 500,\n//   Meals: 200,\n//   Supplies: 300,\n//   Accommodation: 1000,\n// };\n// const handleInputChange = (field, index, value) => {\n//   const updatedItems = [...reimItems];\n//   updatedItems[index][field] = value;\n//   setItems(updatedItems);\n// };\nconst handleAddItem=()=>{const lastItemValue=reimItems.length>0?reimItems[reimItems.length-1].item:0;const newItem={id:nextItemId,item:Number(lastItemValue)+10||10,reimbursementType:\"\",reimbursementDate:\"\",amountToBeReimbursed:\"\",amountEligibleToClaim:\"\"};setItems(prevItems=>[...prevItems,newItem]);setNextItemId(prevId=>prevId+10);};const handleReimbursementDateChange=(e,id)=>{const updatedItems=reimItems.map(item=>item.id===id?{...item,reimbursementDate:e.target.value}:item);setItems(updatedItems);};const handleReimbursementTypeChange=(value,id)=>{const updatedItems=reimItems.map(item=>item.id===id?{...item,reimbursementType:value}:item);setItems(updatedItems);};const handleAmountToBeReimbursedChange=(e,id)=>{const value=parseFloat(e.target.value)||0;const updatedItems=reimItems.map(item=>item.id===id?{...item,amountToBeReimbursed:value>item.amountEligibleToClaim?item.amountEligibleToClaim// Set to eligible amount if input exceeds it\n:value}:item);setItems(updatedItems);calculateTotalAmount(updatedItems);};const calculateTotalAmount=items=>{const total=items.reduce((sum,item)=>sum+(Number(item.amountToBeReimbursed)||0),0);setTotalAmount(total);};return/*#__PURE__*/_jsxs(Box,{py:5,children:[/*#__PURE__*/_jsx(TableContainer,{component:Paper,children:/*#__PURE__*/_jsxs(Table,{children:[/*#__PURE__*/_jsx(TableHead,{children:/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{children:\"Item\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Reimbursement Type\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Reimbursement Date\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Amount To Be Reimbursed\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Amount Eligible To Claim\"})]})}),/*#__PURE__*/_jsx(TableBody,{children:reimItems.map(item=>/*#__PURE__*/_jsxs(TableRow,{className:\"custom-table-row\",children:[/*#__PURE__*/_jsx(TableCell,{className:\"custom-table-cell\",style:{width:'auto',whiteSpace:'nowrap'},children:item.item}),/*#__PURE__*/_jsx(TableCell,{className:\"custom-table-cell\",style:{width:\"auto\",whiteSpace:\"nowrap\"},children:/*#__PURE__*/_jsxs(Select,{value:item.reimbursementType// Show the existing value\n,onChange:e=>handleReimbursementTypeChange(e.target.value,item.id)// Update the value\n,displayEmpty:true,style:{width:\"100%\"},children:[/*#__PURE__*/_jsx(MenuItem,{value:\"\",disabled:true,children:\"Select Type\"}),reimbursementTypes.map(type=>/*#__PURE__*/_jsx(MenuItem,{value:type,children:type},type))]})}),/*#__PURE__*/_jsx(TableCell,{className:\"custom-table-cell\",style:{width:\"auto\",whiteSpace:\"nowrap\"},children:/*#__PURE__*/_jsx(TextField,{type:\"date\",value:item.reimbursementDate// Show the existing value\n,onChange:e=>handleReimbursementDateChange(e,item.id)// Update the value\n,InputLabelProps:{shrink:true},disabled:!isEditing,style:{width:\"100%\"}})}),/*#__PURE__*/_jsx(TableCell,{className:\"custom-table-cell\",style:{width:'auto',whiteSpace:'nowrap'},children:/*#__PURE__*/_jsx(OutlinedInput,{value:item.amountToBeReimbursed||\"\",onChange:e=>handleAmountToBeReimbursedChange(e,item.id),placeholder:\"Amount to be reimbursed\",className:\"editable-cell\",error:!!validationErrors[`item-${item.id}-amountToBeReimbursed`],\"aria-describedby\":`item-${item.id}-amountToBeReimbursed-error`})}),/*#__PURE__*/_jsx(TableCell,{children:item.amountEligibleToClaim})]},item.id))})]})}),/*#__PURE__*/_jsx(Button,{variant:\"outlined\",color:\"primary\",onClick:handleAddItem,style:{marginTop:\"16px\"},children:\"Add Item\"})]});}","map":{"version":3,"names":["React","useEffect","useRef","useState","Button","Box","OutlinedInput","Select","MenuItem","TextField","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","jsx","_jsx","jsxs","_jsxs","ReimbursementItems","_ref","reimItems","setItems","isEditing","reimbursmentId","status","reimbursementDate","totalAmount","setTotalAmount","validationErrors","nextItemId","setNextItemId","reimbursementTypes","handleAddItem","lastItemValue","length","item","newItem","id","Number","reimbursementType","amountToBeReimbursed","amountEligibleToClaim","prevItems","prevId","handleReimbursementDateChange","e","updatedItems","map","target","value","handleReimbursementTypeChange","handleAmountToBeReimbursedChange","parseFloat","calculateTotalAmount","items","total","reduce","sum","py","children","component","className","style","width","whiteSpace","onChange","displayEmpty","disabled","type","InputLabelProps","shrink","placeholder","error","variant","color","onClick","marginTop"],"sources":["/home/user/projects/ReactReimbursement/reimModule/src/pages/ReimbursementItems.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport {\n  Button, Box, OutlinedInput, Select, MenuItem, TextField, Table, TableBody,\n  TableCell, TableContainer, TableHead, TableRow, Paper\n} from \"@material-ui/core\";\n\nexport default function ReimbursementItems({ reimItems, setItems, isEditing, reimbursmentId, status, reimbursementDate, totalAmount, setTotalAmount, validationErrors }) {\n  const [nextItemId, setNextItemId] = useState(10);\n\n  const reimbursementTypes = [\"Travel\", \"Meals\", \"Supplies\", \"Accommodation\"];\n  // const reimbursementTypeDefaults = {\n  //   Travel: 500,\n  //   Meals: 200,\n  //   Supplies: 300,\n  //   Accommodation: 1000,\n  // };\n\n  // const handleInputChange = (field, index, value) => {\n  //   const updatedItems = [...reimItems];\n  //   updatedItems[index][field] = value;\n  //   setItems(updatedItems);\n  // };\n\n  const handleAddItem = () => {\n    const lastItemValue = reimItems.length > 0 ? reimItems[reimItems.length - 1].item : 0;\n    const newItem = {\n      id: nextItemId,\n      item: Number(lastItemValue) + 10 || 10,\n      reimbursementType: \"\",\n      reimbursementDate: \"\",\n      amountToBeReimbursed: \"\",\n      amountEligibleToClaim: \"\"\n    };\n    setItems(prevItems => [...prevItems, newItem]);\n    setNextItemId(prevId => prevId + 10);\n\n  };\n\n\n  const handleReimbursementDateChange = (e, id) => {\n    const updatedItems = reimItems.map((item) =>\n      item.id === id ? { ...item, reimbursementDate: e.target.value } : item\n    );\n    setItems(updatedItems);\n  };\n  const handleReimbursementTypeChange = (value, id) => {\n    const updatedItems = reimItems.map((item) =>\n      item.id === id ? { ...item, reimbursementType: value } : item\n    );\n    setItems(updatedItems);\n  };\n\n\n  const handleAmountToBeReimbursedChange = (e, id) => {\n    const value = parseFloat(e.target.value) || 0;\n    const updatedItems = reimItems.map(item =>\n      item.id === id\n        ? {\n          ...item,\n          amountToBeReimbursed: value > item.amountEligibleToClaim\n            ? item.amountEligibleToClaim  // Set to eligible amount if input exceeds it\n            : value\n        }\n        : item\n    );\n\n    setItems(updatedItems);\n    calculateTotalAmount(updatedItems);\n  };\n\n  const calculateTotalAmount = (items) => {\n    const total = items.reduce((sum, item) => sum + (Number(item.amountToBeReimbursed) || 0), 0);\n    setTotalAmount(total);\n  };\n\n\n  return (\n\n    <Box py={5}>\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Item</TableCell>\n              <TableCell>Reimbursement Type</TableCell>\n              <TableCell>Reimbursement Date</TableCell>\n              <TableCell>Amount To Be Reimbursed</TableCell>\n              <TableCell>Amount Eligible To Claim</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {reimItems.map((item) => (\n              <TableRow key={item.id} className=\"custom-table-row\">\n                <TableCell className=\"custom-table-cell\" style={{ width: 'auto', whiteSpace: 'nowrap' }}>\n                  {item.item}\n                </TableCell>\n                <TableCell\n                  className=\"custom-table-cell\"\n                  style={{ width: \"auto\", whiteSpace: \"nowrap\" }}\n                >\n                  <Select\n                    value={item.reimbursementType} // Show the existing value\n                    onChange={(e) => handleReimbursementTypeChange(e.target.value, item.id)} // Update the value\n                    displayEmpty\n                    style={{ width: \"100%\" }}\n                  >\n                    <MenuItem value=\"\" disabled>\n                      Select Type\n                    </MenuItem>\n                    {reimbursementTypes.map((type) => (\n                      <MenuItem key={type} value={type}>\n                        {type}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </TableCell>\n\n                <TableCell\n                  className=\"custom-table-cell\"\n                  style={{ width: \"auto\", whiteSpace: \"nowrap\" }}\n                >\n                  <TextField\n                    type=\"date\"\n                    value={item.reimbursementDate} // Show the existing value\n                    onChange={(e) => handleReimbursementDateChange(e, item.id)} // Update the value\n                    InputLabelProps={{ shrink: true }}\n                    disabled={!isEditing}\n                    style={{ width: \"100%\" }}\n                    \n                  />\n             \n                </TableCell>\n\n                <TableCell className=\"custom-table-cell\" style={{ width: 'auto', whiteSpace: 'nowrap' }}>\n                  <OutlinedInput\n                    value={item.amountToBeReimbursed || \"\"}\n                    onChange={(e) => handleAmountToBeReimbursedChange(e, item.id)}\n                    placeholder=\"Amount to be reimbursed\"\n                    className=\"editable-cell\"\n                    error={!!validationErrors[`item-${item.id}-amountToBeReimbursed`]}\n                    aria-describedby={`item-${item.id}-amountToBeReimbursed-error`}\n                  />\n                </TableCell>\n                <TableCell>{item.amountEligibleToClaim}</TableCell>\n              </TableRow>\n\n\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleAddItem} style={{ marginTop: \"16px\" }}>\n        Add Item\n      </Button>\n    </Box>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}